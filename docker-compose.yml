services:
  mysql:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3307:3306"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - micro_net

  apigateway:
    build:
      context: .
      dockerfile: ./ApiGateway/Dockerfile
    ports:
      - "5000:8080"
    depends_on:
      - mysql
      - adminservice
      - deliveryservice
      - salesservice
      - depotservice
      - verificationservice
      - identityservice
    networks:
      - micro_net

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
    - micro_net

  adminservice:
    build:
      context: .
      dockerfile: ./AdminService.API/Dockerfile
    ports:
      - "5001:8080"
    depends_on:
      - mysql
      - rabbitmq
    networks:
      - micro_net
  
  deliveryservice:
    build:
      context: .
      dockerfile: ./DeliveryService.API/Dockerfile
    ports:
      - "5002:8080"
    depends_on:
      - mysql
      - rabbitmq
    networks:
      - micro_net

  depotservice:
    build:
      context: .
      dockerfile: ./DepotService.API/Dockerfile
    ports:
      - "5003:8080"
    depends_on:
      - mysql
      - rabbitmq
    networks:
      - micro_net

  salesservice:
    build:
      context: .
      dockerfile: ./SalesService.API/Dockerfile
    ports:
      - "5004:8080"
    depends_on:
      - mysql
      - rabbitmq
    networks:
      - micro_net


  verificationservice:
    build:
      context: .
      dockerfile: ./VerificationService.API/Dockerfile
    ports:
      - "5005:8080"
    depends_on:
      - mysql
      - rabbitmq
    networks:
      - micro_net

  identityservice:
    build:
      context: .
      dockerfile: ./IdentityService.API/Dockerfile
    ports:
      - "5006:8080"
    depends_on:
      - mysql
      - rabbitmq
    networks:
      - micro_net

  frontend:
    build:
      context: ./frontend
      dockerfile: docker/Dockerfile
    ports:
     - "3000:80"
    depends_on:
     - apigateway
    networks:
     - micro_net


networks:
  micro_net:
    driver: bridge

volumes:
  mysql_data:
